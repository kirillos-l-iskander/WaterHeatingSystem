Version 4.0 HI-TECH Software Intermediate Code
[v F344 `(v ~T0 @X0 0 tf1`*v ]
"4 Scheduler.c
[; ;Scheduler.c: 4: {
[s S8 `*F344 1 `*v 1 `uc 1 `uc 1 `uc 1 ]
[n S8 . pointer paramter delay period runMe ]
"13
[; ;Scheduler.c: 13: {
[s S9 `S8 -> 10 `i `uc 1 `uc 1 ]
[n S9 . task errorCode interruptFlag ]
"8 ./Scheduler.h
[; ;./Scheduler.h: 8: UBaseType_t Scheduler_deleteTask( UBaseType_t index );
[v _Scheduler_deleteTask `(uc ~T0 @X0 0 ef1`uc ]
[v F360 `(v ~T0 @X0 0 tf1`*v ]
[v F363 `(v ~T0 @X0 0 tf1`*v ]
[v F372 `(v ~T0 @X0 0 tf1`*v ]
[v F385 `(v ~T0 @X0 0 tf1`*v ]
[v F391 `(v ~T0 @X0 0 tf1`*v ]
"78 ./SchedulerConfig.h
[; ;./SchedulerConfig.h: 78: void Scheduler_initSysTick( TickType_t msTicksPeriod );
[v _Scheduler_initSysTick `(v ~T0 @X0 0 ef1`ui ]
"79
[; ;./SchedulerConfig.h: 79: void Scheduler_displayError( UBaseType_t errorCode );
[v _Scheduler_displayError `(v ~T0 @X0 0 ef1`uc ]
"80
[; ;./SchedulerConfig.h: 80: void Scheduler_sleepHardware( void );
[v _Scheduler_sleepHardware `(v ~T0 @X0 0 ef ]
[v F405 `(v ~T0 @X0 0 tf1`*v ]
"19 Scheduler.c
[; ;Scheduler.c: 19: volatile static Scheduler_t scheduler;
[v _scheduler `VS9 ~T0 @X0 1 s ]
"21
[; ;Scheduler.c: 21: void Scheduler_init( void )
[v _Scheduler_init `(v ~T0 @X0 1 ef ]
"22
[; ;Scheduler.c: 22: {
{
[e :U _Scheduler_init ]
[f ]
"23
[; ;Scheduler.c: 23:  size_t index = 0;
[v _index `ui ~T0 @X0 1 a ]
[e = _index -> -> 0 `i `ui ]
"24
[; ;Scheduler.c: 24:  for( index = 0; index < ( ( UBaseType_t ) 10 ); index++ )
{
[e = _index -> -> 0 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 11  ]
[e $U 12  ]
[e :U 11 ]
"25
[; ;Scheduler.c: 25:  {
{
"26
[; ;Scheduler.c: 26:   Scheduler_deleteTask( index );
[e ( _Scheduler_deleteTask (1 -> _index `uc ]
"27
[; ;Scheduler.c: 27:  }
}
[e ++ _index -> -> 1 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 11  ]
[e :U 12 ]
}
"28
[; ;Scheduler.c: 28:  scheduler.errorCode = 0;
[e = . _scheduler 1 -> -> 0 `i `uc ]
"29
[; ;Scheduler.c: 29:  scheduler.interruptFlag = 0;
[e = . _scheduler 2 -> -> 0 `i `uc ]
"30
[; ;Scheduler.c: 30: }
[e :UE 10 ]
}
"32
[; ;Scheduler.c: 32: UBaseType_t Scheduler_addTask( void (*task)( void *paramter ), void *paramter, UBaseType_t delay, UBaseType_t period )
[v _Scheduler_addTask `(uc ~T0 @X0 1 ef4`*F360`*v`uc`uc ]
"33
[; ;Scheduler.c: 33: {
{
[e :U _Scheduler_addTask ]
"32
[; ;Scheduler.c: 32: UBaseType_t Scheduler_addTask( void (*task)( void *paramter ), void *paramter, UBaseType_t delay, UBaseType_t period )
[v _task `*F363 ~T0 @X0 1 r1 ]
[v _paramter `*v ~T0 @X0 1 r2 ]
[v _delay `uc ~T0 @X0 1 r3 ]
[v _period `uc ~T0 @X0 1 r4 ]
"33
[; ;Scheduler.c: 33: {
[f ]
"34
[; ;Scheduler.c: 34:  size_t index = 0;
[v _index `ui ~T0 @X0 1 a ]
[e = _index -> -> 0 `i `ui ]
"35
[; ;Scheduler.c: 35:  for( index = 0; index < ( ( UBaseType_t ) 10 ); index++ )
{
[e = _index -> -> 0 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 15  ]
[e $U 16  ]
[e :U 15 ]
"36
[; ;Scheduler.c: 36:  {
{
"37
[; ;Scheduler.c: 37:   if( scheduler.task[ index ].pointer == 0 )
[e $ ! == . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 0 -> -> 0 `i `*F372 18  ]
"38
[; ;Scheduler.c: 38:   {
{
"39
[; ;Scheduler.c: 39:    break;
[e $U 16  ]
"40
[; ;Scheduler.c: 40:   }
}
[e :U 18 ]
"41
[; ;Scheduler.c: 41:  }
}
[e ++ _index -> -> 1 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 15  ]
[e :U 16 ]
}
"42
[; ;Scheduler.c: 42:  if( index == ( ( UBaseType_t ) 10 ) )
[e $ ! == _index -> -> -> 10 `i `uc `ui 19  ]
"43
[; ;Scheduler.c: 43:  {
{
"44
[; ;Scheduler.c: 44:   return ( ( UBaseType_t ) 10 );
[e ) -> -> 10 `i `uc ]
[e $UE 14  ]
"45
[; ;Scheduler.c: 45:  }
}
[e :U 19 ]
"46
[; ;Scheduler.c: 46:  scheduler.task[ index ].pointer = task;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 0 _task ]
"47
[; ;Scheduler.c: 47:  scheduler.task[ index ].paramter = paramter;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 1 _paramter ]
"48
[; ;Scheduler.c: 48:  scheduler.task[ index ].delay = delay;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 2 _delay ]
"49
[; ;Scheduler.c: 49:  scheduler.task[ index ].period = period;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 3 _period ]
"50
[; ;Scheduler.c: 50:  scheduler.task[ index ].runMe = 0;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 4 -> -> 0 `i `uc ]
"51
[; ;Scheduler.c: 51:  return index;
[e ) -> _index `uc ]
[e $UE 14  ]
"52
[; ;Scheduler.c: 52: }
[e :UE 14 ]
}
"54
[; ;Scheduler.c: 54: UBaseType_t Scheduler_deleteTask( UBaseType_t index )
[v _Scheduler_deleteTask `(uc ~T0 @X0 1 ef1`uc ]
"55
[; ;Scheduler.c: 55: {
{
[e :U _Scheduler_deleteTask ]
"54
[; ;Scheduler.c: 54: UBaseType_t Scheduler_deleteTask( UBaseType_t index )
[v _index `uc ~T0 @X0 1 r1 ]
"55
[; ;Scheduler.c: 55: {
[f ]
"56
[; ;Scheduler.c: 56:  if( scheduler.task[ index ].pointer == 0 )
[e $ ! == . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 0 -> -> 0 `i `*F385 21  ]
"57
[; ;Scheduler.c: 57:  {
{
"58
[; ;Scheduler.c: 58:   return ( 0 );
[e ) -> -> 0 `i `uc ]
[e $UE 20  ]
"59
[; ;Scheduler.c: 59:  }
}
[e :U 21 ]
[v F390 `*F391 ~T0 @X0 1 t ]
"60
[; ;Scheduler.c: 60:  scheduler.task[ index ].pointer = 0x00000000;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 0 -> -> 0 `i `V*F391 ]
[v F396 `*v ~T0 @X0 1 t ]
"61
[; ;Scheduler.c: 61:  scheduler.task[ index ].paramter = 0x00000000;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 1 -> -> 0 `i `V*v ]
"62
[; ;Scheduler.c: 62:  scheduler.task[ index ].delay = 0;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 2 -> -> 0 `i `uc ]
"63
[; ;Scheduler.c: 63:  scheduler.task[ index ].period = 0;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 3 -> -> 0 `i `uc ]
"64
[; ;Scheduler.c: 64:  scheduler.task[ index ].runMe = 0;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 4 -> -> 0 `i `uc ]
"65
[; ;Scheduler.c: 65:  return ( !( 0 ) );
[e ) -> -> ! != -> 0 `i -> 0 `i `i `uc ]
[e $UE 20  ]
"66
[; ;Scheduler.c: 66: }
[e :UE 20 ]
}
"68
[; ;Scheduler.c: 68: void Scheduler_start( void )
[v _Scheduler_start `(v ~T0 @X0 1 ef ]
"69
[; ;Scheduler.c: 69: {
{
[e :U _Scheduler_start ]
[f ]
"70
[; ;Scheduler.c: 70:  Scheduler_initSysTick( ( ( TickType_t ) 5 ) );
[e ( _Scheduler_initSysTick (1 -> -> 5 `i `ui ]
"71
[; ;Scheduler.c: 71: }
[e :UE 22 ]
}
"73
[; ;Scheduler.c: 73: void Scheduler_reportStatus( void )
[v _Scheduler_reportStatus `(v ~T0 @X0 1 ef ]
"74
[; ;Scheduler.c: 74: {
{
[e :U _Scheduler_reportStatus ]
[f ]
"75
[; ;Scheduler.c: 75:  if( scheduler.interruptFlag == 1 )
[e $ ! == -> . _scheduler 2 `i -> 1 `i 24  ]
"76
[; ;Scheduler.c: 76:  {
{
"77
[; ;Scheduler.c: 77:   scheduler.errorCode = ( 1 );
[e = . _scheduler 1 -> -> 1 `i `uc ]
"78
[; ;Scheduler.c: 78:  }
}
[e :U 24 ]
"79
[; ;Scheduler.c: 79:  Scheduler_displayError( scheduler.errorCode );
[e ( _Scheduler_displayError (1 . _scheduler 1 ]
"80
[; ;Scheduler.c: 80: }
[e :UE 23 ]
}
"82
[; ;Scheduler.c: 82: void Scheduler_goToSleep( void )
[v _Scheduler_goToSleep `(v ~T0 @X0 1 ef ]
"83
[; ;Scheduler.c: 83: {
{
[e :U _Scheduler_goToSleep ]
[f ]
"84
[; ;Scheduler.c: 84:  if( scheduler.interruptFlag == 1 )
[e $ ! == -> . _scheduler 2 `i -> 1 `i 26  ]
"85
[; ;Scheduler.c: 85:  {
{
"86
[; ;Scheduler.c: 86:   scheduler.interruptFlag = 0;
[e = . _scheduler 2 -> -> 0 `i `uc ]
"87
[; ;Scheduler.c: 87:  }
}
[e :U 26 ]
"88
[; ;Scheduler.c: 88:  while( scheduler.interruptFlag == 0 )
[e $U 27  ]
[e :U 28 ]
"89
[; ;Scheduler.c: 89:  {
{
"90
[; ;Scheduler.c: 90:   Scheduler_sleepHardware();
[e ( _Scheduler_sleepHardware ..  ]
"91
[; ;Scheduler.c: 91:  }
}
[e :U 27 ]
"88
[; ;Scheduler.c: 88:  while( scheduler.interruptFlag == 0 )
[e $ == -> . _scheduler 2 `i -> 0 `i 28  ]
[e :U 29 ]
"92
[; ;Scheduler.c: 92:  scheduler.interruptFlag = 0;
[e = . _scheduler 2 -> -> 0 `i `uc ]
"93
[; ;Scheduler.c: 93: }
[e :UE 25 ]
}
"95
[; ;Scheduler.c: 95: void Scheduler_update( void )
[v _Scheduler_update `(v ~T0 @X0 1 ef ]
"96
[; ;Scheduler.c: 96: {
{
[e :U _Scheduler_update ]
[f ]
"97
[; ;Scheduler.c: 97:  size_t index = 0;
[v _index `ui ~T0 @X0 1 a ]
[e = _index -> -> 0 `i `ui ]
"98
[; ;Scheduler.c: 98:  for( index = 0; index < ( ( UBaseType_t ) 10 ); index++ )
{
[e = _index -> -> 0 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 31  ]
[e $U 32  ]
[e :U 31 ]
"99
[; ;Scheduler.c: 99:  {
{
"100
[; ;Scheduler.c: 100:   if( scheduler.task[ index ].pointer != 0 )
[e $ ! != . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 0 -> -> 0 `i `*F405 34  ]
"101
[; ;Scheduler.c: 101:   {
{
"102
[; ;Scheduler.c: 102:    if( scheduler.task[ index ].delay == 0 )
[e $ ! == -> . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 2 `i -> 0 `i 35  ]
"103
[; ;Scheduler.c: 103:    {
{
"104
[; ;Scheduler.c: 104:     scheduler.task[ index ].runMe = 1;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 4 -> -> 1 `i `uc ]
"105
[; ;Scheduler.c: 105:     scheduler.task[ index ].delay = scheduler.task[ index ].period;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 2 . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 3 ]
"106
[; ;Scheduler.c: 106:    }
}
[e :U 35 ]
"107
[; ;Scheduler.c: 107:    if( scheduler.task[ index ].delay != 0 )
[e $ ! != -> . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 2 `i -> 0 `i 36  ]
"108
[; ;Scheduler.c: 108:    {
{
"109
[; ;Scheduler.c: 109:     scheduler.task[ index ].delay--;
[e -- . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 2 -> -> 1 `i `Vuc ]
"110
[; ;Scheduler.c: 110:    }
}
[e :U 36 ]
"111
[; ;Scheduler.c: 111:   }
}
[e :U 34 ]
"112
[; ;Scheduler.c: 112:  }
}
[e ++ _index -> -> 1 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 31  ]
[e :U 32 ]
}
"113
[; ;Scheduler.c: 113:  scheduler.interruptFlag = 1;
[e = . _scheduler 2 -> -> 1 `i `uc ]
"114
[; ;Scheduler.c: 114: }
[e :UE 30 ]
}
"116
[; ;Scheduler.c: 116: void Scheduler_dispatchTasks( void )
[v _Scheduler_dispatchTasks `(v ~T0 @X0 1 ef ]
"117
[; ;Scheduler.c: 117: {
{
[e :U _Scheduler_dispatchTasks ]
[f ]
"118
[; ;Scheduler.c: 118:  size_t index = 0;
[v _index `ui ~T0 @X0 1 a ]
[e = _index -> -> 0 `i `ui ]
"119
[; ;Scheduler.c: 119:  for( index = 0; index < ( ( UBaseType_t ) 10 ); index++ )
{
[e = _index -> -> 0 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 38  ]
[e $U 39  ]
[e :U 38 ]
"120
[; ;Scheduler.c: 120:  {
{
"121
[; ;Scheduler.c: 121:   if( scheduler.task[ index ].runMe != 0 )
[e $ ! != -> . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 4 `i -> 0 `i 41  ]
"122
[; ;Scheduler.c: 122:   {
{
"123
[; ;Scheduler.c: 123:    (*scheduler.task[ index ].pointer)( scheduler.task[ index ].paramter );
[e ( *U . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 0 (1 . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 1 ]
"124
[; ;Scheduler.c: 124:    scheduler.task[ index ].runMe = 0;
[e = . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 4 -> -> 0 `i `uc ]
"125
[; ;Scheduler.c: 125:    if( scheduler.task[ index ].period == 0 )
[e $ ! == -> . *U + &U . _scheduler 0 * -> _index `ux -> -> # *U &U . _scheduler 0 `ui `ux 3 `i -> 0 `i 42  ]
"126
[; ;Scheduler.c: 126:    {
{
"127
[; ;Scheduler.c: 127:     Scheduler_deleteTask( index );
[e ( _Scheduler_deleteTask (1 -> _index `uc ]
"128
[; ;Scheduler.c: 128:    }
}
[e :U 42 ]
"129
[; ;Scheduler.c: 129:   }
}
[e :U 41 ]
"130
[; ;Scheduler.c: 130:  }
}
[e ++ _index -> -> 1 `i `ui ]
[e $ < _index -> -> -> 10 `i `uc `ui 38  ]
[e :U 39 ]
}
"131
[; ;Scheduler.c: 131:  Scheduler_reportStatus();
[e ( _Scheduler_reportStatus ..  ]
"132
[; ;Scheduler.c: 132:  Scheduler_goToSleep();
[e ( _Scheduler_goToSleep ..  ]
"133
[; ;Scheduler.c: 133: }
[e :UE 37 ]
}
