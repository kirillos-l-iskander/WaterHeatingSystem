#ifndef TIMER_H
#define	TIMER_H

#include "Config.h"

#define TIM0_RELOAD() ( TMR0 = 6 )
#define TIM0_CLR_INT_FLAG() ( INTCON = INTCON & ~0x04 )
#define TIM0_CHECK_INT_FLAG() ( INTCON & 0x04 )
#define TIM1_MAX ( 65536 )
#define TIM1_CLR_INT_FLAG() ( PIR1 = PIR1 & ~0x04 )

typedef enum
{
	TIMER_ID_0 = 0,
	TIMER_ID_1,
	TIMER_ID_2,
	TIMER_ID_MAX,
}   TIMER_ID_t;

typedef enum
{
	TIMER_MODE_NORMAL = 0,
	TIMER_MODE_COUNTUP,
}	TIMER_MODE_t;

typedef enum
{
	TIMER_CHANNEL_NORMAL = 0,
	TIMER_CHANNEL_1,
}	TIMER_CHANNEL_t;

typedef enum
{
	TIMER_EVENT_NORMAL = 0x0B,
	TIMER_EVENT_CLOCKIN_RISING,
	TIMER_EVENT_CLOCKIN_FALLING,
	TIMER_EVENT_CAPTURE_RISING = 0x05,
	TIMER_EVENT_CAPTURE_FALLING = 0x04,
	TIMER_EVENT_COMPARE_SET = 0x08,
	TIMER_EVENT_COMPARE_RESET = 0x09,
	TIMER_EVENT_PWM_NONINVERT = 0x0F,
	TIMER_EVENT_PWM_INVERT,
}	TIMER_EVENT_t;

typedef enum
{
	TIMER_PERIOD_MIN = 0,
	TIMER_PERIOD_MAX = 1000,
}	TIMER_PERIOD_t;

typedef enum
{
	TIMER_COUNTER_MIN = 0,
	TIMER_COUNTER_MAX = 65535,
}	TIMER_COUNTER_t;

typedef enum
{
	TIMER_PWM_MIN = 0,
	TIMER_PWM_MAX = 100,
}	TIMER_PWM_t;

void Timer_init( TIMER_ID_t id, TIMER_MODE_t mode, TIMER_PERIOD_t period, TIMER_CHANNEL_t channel, TIMER_EVENT_t event );
void Timer_enableInterrupt( TIMER_ID_t id );

#endif	/* TIMER_H */
